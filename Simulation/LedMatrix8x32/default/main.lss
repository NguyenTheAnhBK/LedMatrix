
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000268  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00000268  000002fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800090  00800090  0000032c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000c0  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002a8  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000018a  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b9  00000000  00000000  0000083e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00000af8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000010c  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000097  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e9       	ldi	r26, 0x90	; 144
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 39       	cpi	r26, 0x92	; 146
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  8a:	0c 94 32 01 	jmp	0x264	; 0x264 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USART_init>:

// Initial
void USART_init(unsigned int baud){
	// Set baud rate with USART Baud Rate Register
	// Voi U2X = 0
	UBRRH = (unsigned char) (baud >> 8);
  92:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char) baud;
  94:	89 b9       	out	0x09, r24	; 9
	
	// Enable receiver and transmitter (USART Control and Status Register B)
	UCSRB = (1 << RXEN) | (1 << TXEN);
  96:	88 e1       	ldi	r24, 0x18	; 24
  98:	8a b9       	out	0x0a, r24	; 10
	//UCSRB |= (1 << RXCIE);

	// Set frame format: 8 (data), no parity (USART Parity Mode = 0), 1 stop (USBS = 0)
	// Chon thanh ghi USCRC voi USART Register Select 
	// Chon charecter size voi USART Character Size (UCSZ0 -> UCSZ2)
	UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
  9a:	86 e8       	ldi	r24, 0x86	; 134
  9c:	80 bd       	out	0x20, r24	; 32

	//sei(); // set bit I cho phep ngat toan cuc
}
  9e:	08 95       	ret

000000a0 <USART_transmit>:


// Transmitter (ATmega co buffer 3 bytes cho TX
void USART_transmit(unsigned char c){
	// UART Data Register Empty = 1 thi bat dau truyen (nhan) du lieu
	while(!(UCSRA & (1 << UDRE))){}; 
  a0:	5d 9b       	sbis	0x0b, 5	; 11
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <USART_transmit>
	UDR = c; // UART Data Register
  a4:	8c b9       	out	0x0c, r24	; 12
}
  a6:	08 95       	ret

000000a8 <USART_transmit_string>:

void USART_transmit_string(char* data){
  a8:	fc 01       	movw	r30, r24
  aa:	04 c0       	rjmp	.+8      	; 0xb4 <USART_transmit_string+0xc>


// Transmitter (ATmega co buffer 3 bytes cho TX
void USART_transmit(unsigned char c){
	// UART Data Register Empty = 1 thi bat dau truyen (nhan) du lieu
	while(!(UCSRA & (1 << UDRE))){}; 
  ac:	5d 9b       	sbis	0x0b, 5	; 11
  ae:	fe cf       	rjmp	.-4      	; 0xac <USART_transmit_string+0x4>
	UDR = c; // UART Data Register
  b0:	8c b9       	out	0x0c, r24	; 12
}

void USART_transmit_string(char* data){
	while(*data != 0x00){
		USART_transmit(*data);
		data++;
  b2:	31 96       	adiw	r30, 0x01	; 1
	while(!(UCSRA & (1 << UDRE))){}; 
	UDR = c; // UART Data Register
}

void USART_transmit_string(char* data){
	while(*data != 0x00){
  b4:	80 81       	ld	r24, Z
  b6:	88 23       	and	r24, r24
  b8:	c9 f7       	brne	.-14     	; 0xac <USART_transmit_string+0x4>
		USART_transmit(*data);
		data++;
	}		
}
  ba:	08 95       	ret

000000bc <USART_receive>:


// Receiver
unsigned char USART_receive(){
	while(!(UCSRA & (1 << RXC))){};
  bc:	5f 9b       	sbis	0x0b, 7	; 11
  be:	fe cf       	rjmp	.-4      	; 0xbc <USART_receive>
	// Get and return received data from buffer
	return UDR;
  c0:	8c b1       	in	r24, 0x0c	; 12
}
  c2:	08 95       	ret

000000c4 <USART_address_tx>:

void USART_address_tx(unsigned char c){
	while(!(UCSRA & (1 << UDRE)));
  c4:	5d 9b       	sbis	0x0b, 5	; 11
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <USART_address_tx>
	UCSRB |= (1 << TXB8);
  c8:	50 9a       	sbi	0x0a, 0	; 10
	UDR = c;
  ca:	8c b9       	out	0x0c, r24	; 12
}
  cc:	08 95       	ret

000000ce <__vector_11>:

// Trinh phuc vu ngat USART hoan tat nhan
ISR(SIG_UART_RECV){
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	8f 93       	push	r24
	_data = UDR;
  da:	8c b1       	in	r24, 0x0c	; 12
  dc:	80 93 91 00 	sts	0x0091, r24
	USART_transmit(_data);
  e0:	80 91 91 00 	lds	r24, 0x0091


// Transmitter (ATmega co buffer 3 bytes cho TX
void USART_transmit(unsigned char c){
	// UART Data Register Empty = 1 thi bat dau truyen (nhan) du lieu
	while(!(UCSRA & (1 << UDRE))){}; 
  e4:	5d 9b       	sbis	0x0b, 5	; 11
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <__vector_11+0x16>
	UDR = c; // UART Data Register
  e8:	8c b9       	out	0x0c, r24	; 12

// Trinh phuc vu ngat USART hoan tat nhan
ISR(SIG_UART_RECV){
	_data = UDR;
	USART_transmit(_data);
}
  ea:	8f 91       	pop	r24
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <HC595_out>:
#define ST_CP_high() ST_CP_PORT |= 1 << ST_CP_PIN;
#define SH_CP_low() SH_CP_PORT &= ~(1 << SH_CP_PIN);
#define SH_CP_high() SH_CP_PORT |= 1 << SH_CP_PIN;


void HC595_out(unsigned char byte){
  f6:	df 93       	push	r29
  f8:	cf 93       	push	r28
  fa:	0f 92       	push	r0
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
 100:	89 83       	std	Y+1, r24	; 0x01
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	30 e0       	ldi	r19, 0x00	; 0
	//SH_CP_low();
	//ST_CP_low();
	for(int i = 0; i < 8; i++){
		if(bit_is_set(byte, i)){
 106:	fe 01       	movw	r30, r28
 108:	31 96       	adiw	r30, 0x01	; 1
 10a:	80 81       	ld	r24, Z
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 2e       	mov	r0, r18
 110:	02 c0       	rjmp	.+4      	; 0x116 <HC595_out+0x20>
 112:	95 95       	asr	r25
 114:	87 95       	ror	r24
 116:	0a 94       	dec	r0
 118:	e2 f7       	brpl	.-8      	; 0x112 <HC595_out+0x1c>
 11a:	80 ff       	sbrs	r24, 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <HC595_out+0x2c>
			DS_high();
 11e:	d9 9a       	sbi	0x1b, 1	; 27
 120:	01 c0       	rjmp	.+2      	; 0x124 <HC595_out+0x2e>
		}
		else
			DS_low();
 122:	d9 98       	cbi	0x1b, 1	; 27
		SH_CP_low();
 124:	da 98       	cbi	0x1b, 2	; 27
		SH_CP_high();
 126:	da 9a       	sbi	0x1b, 2	; 27


void HC595_out(unsigned char byte){
	//SH_CP_low();
	//ST_CP_low();
	for(int i = 0; i < 8; i++){
 128:	2f 5f       	subi	r18, 0xFF	; 255
 12a:	3f 4f       	sbci	r19, 0xFF	; 255
 12c:	28 30       	cpi	r18, 0x08	; 8
 12e:	31 05       	cpc	r19, r1
 130:	61 f7       	brne	.-40     	; 0x10a <HC595_out+0x14>
		else
			DS_low();
		SH_CP_low();
		SH_CP_high();
	}
}
 132:	0f 90       	pop	r0
 134:	cf 91       	pop	r28
 136:	df 91       	pop	r29
 138:	08 95       	ret

0000013a <main>:
						  0xFF, 0xFF, 0xFF, 0xFF,
						  0xFF, 0xFF, 0xFF, 0xFF,
						  0xFF, 0xFF, 0xFF, 0xFF};

int main(){
	DDRA |= 0b00000111;
 13a:	8a b3       	in	r24, 0x1a	; 26
 13c:	87 60       	ori	r24, 0x07	; 7
 13e:	8a bb       	out	0x1a, r24	; 26
	PORTA &= 0x00;
 140:	8b b3       	in	r24, 0x1b	; 27
 142:	1b ba       	out	0x1b, r1	; 27
	DDRC |= 0xFF;
 144:	84 b3       	in	r24, 0x14	; 20
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	84 bb       	out	0x14, r24	; 20
	PORTC &= 0xFF;
 14a:	85 b3       	in	r24, 0x15	; 21
 14c:	85 bb       	out	0x15, r24	; 21

	// Tan so quet 120Hz -> dinh thoi 8.3ms tren T/C1
	TCCR1B = (1 << CS11); //CS12 = 0, CS11 = 1, CS10 = 0: chon Prescale = 8 (1Mhz)
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 57202;
 152:	82 e7       	ldi	r24, 0x72	; 114
 154:	9f ed       	ldi	r25, 0xDF	; 223
 156:	9d bd       	out	0x2d, r25	; 45
 158:	8c bd       	out	0x2c, r24	; 44
	TIMSK = (1 << TOIE1); //cho phep ngat khi co tran T/C1
 15a:	84 e0       	ldi	r24, 0x04	; 4
 15c:	89 bf       	out	0x39, r24	; 57
	sei(); //set bit I cho phep ngat toan cuc
 15e:	78 94       	sei

// Initial
void USART_init(unsigned int baud){
	// Set baud rate with USART Baud Rate Register
	// Voi U2X = 0
	UBRRH = (unsigned char) (baud >> 8);
 160:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) baud;
 162:	88 e0       	ldi	r24, 0x08	; 8
 164:	89 b9       	out	0x09, r24	; 9
	
	// Enable receiver and transmitter (USART Control and Status Register B)
	UCSRB = (1 << RXEN) | (1 << TXEN);
 166:	88 e1       	ldi	r24, 0x18	; 24
 168:	8a b9       	out	0x0a, r24	; 10
	//UCSRB |= (1 << RXCIE);

	// Set frame format: 8 (data), no parity (USART Parity Mode = 0), 1 stop (USBS = 0)
	// Chon thanh ghi USCRC voi USART Register Select 
	// Chon charecter size voi USART Character Size (UCSZ0 -> UCSZ2)
	UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
 16a:	86 e8       	ldi	r24, 0x86	; 134
 16c:	80 bd       	out	0x20, r24	; 32
	

	// Baud rate = 57600 bps (f = 8MHz) -> UBRRL = 8
	USART_init(8);

	USART_transmit_string("Led Matrix 8x32");
 16e:	80 e6       	ldi	r24, 0x60	; 96
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 54 00 	call	0xa8	; 0xa8 <USART_transmit_string>
 176:	80 e0       	ldi	r24, 0x00	; 0
}


// Receiver
unsigned char USART_receive(){
	while(!(UCSRA & (1 << RXC))){};
 178:	5f 9b       	sbis	0x0b, 7	; 11
 17a:	fe cf       	rjmp	.-4      	; 0x178 <main+0x3e>
	// Get and return received data from buffer
	return UDR;
 17c:	9c b1       	in	r25, 0x0c	; 12


// Transmitter (ATmega co buffer 3 bytes cho TX
void USART_transmit(unsigned char c){
	// UART Data Register Empty = 1 thi bat dau truyen (nhan) du lieu
	while(!(UCSRA & (1 << UDRE))){}; 
 17e:	5d 9b       	sbis	0x0b, 5	; 11
 180:	fe cf       	rjmp	.-4      	; 0x17e <main+0x44>
	UDR = c; // UART Data Register
 182:	9c b9       	out	0x0c, r25	; 12
	unsigned char r = 0;
	while(1){
		unsigned char data = USART_receive();
		USART_transmit(data);

		buffer[r++] = data;	
 184:	e8 2f       	mov	r30, r24
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	e0 59       	subi	r30, 0x90	; 144
 18a:	ff 4f       	sbci	r31, 0xFF	; 255
 18c:	90 83       	st	Z, r25
 18e:	8f 5f       	subi	r24, 0xFF	; 255
		if(r == 32){
 190:	80 32       	cpi	r24, 0x20	; 32
 192:	91 f7       	brne	.-28     	; 0x178 <main+0x3e>
 194:	f0 cf       	rjmp	.-32     	; 0x176 <main+0x3c>

00000196 <__vector_8>:
	}
			
	return 0;
}

ISR(TIMER1_OVF_vect){
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	df 92       	push	r13
 1a2:	ef 92       	push	r14
 1a4:	ff 92       	push	r15
 1a6:	0f 93       	push	r16
 1a8:	1f 93       	push	r17
 1aa:	2f 93       	push	r18
 1ac:	3f 93       	push	r19
 1ae:	4f 93       	push	r20
 1b0:	5f 93       	push	r21
 1b2:	6f 93       	push	r22
 1b4:	7f 93       	push	r23
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
	TCNT1 = 57202;
 1c2:	82 e7       	ldi	r24, 0x72	; 114
 1c4:	9f ed       	ldi	r25, 0xDF	; 223
 1c6:	9d bd       	out	0x2d, r25	; 45
 1c8:	8c bd       	out	0x2c, r24	; 44

	//quet tung hang
	static unsigned char row;

	PORTC &= 0xFF; //tat het led
 1ca:	85 b3       	in	r24, 0x15	; 21
 1cc:	85 bb       	out	0x15, r24	; 21

	HC595_out(buffer[4 * row + 3]); //block 4
 1ce:	d0 90 90 00 	lds	r13, 0x0090
 1d2:	ed 2c       	mov	r14, r13
 1d4:	ff 24       	eor	r15, r15
 1d6:	87 01       	movw	r16, r14
 1d8:	00 0f       	add	r16, r16
 1da:	11 1f       	adc	r17, r17
 1dc:	00 0f       	add	r16, r16
 1de:	11 1f       	adc	r17, r17
 1e0:	00 59       	subi	r16, 0x90	; 144
 1e2:	1f 4f       	sbci	r17, 0xFF	; 255
 1e4:	f8 01       	movw	r30, r16
 1e6:	83 81       	ldd	r24, Z+3	; 0x03
 1e8:	0e 94 7b 00 	call	0xf6	; 0xf6 <HC595_out>
	HC595_out(buffer[4 * row + 2]); //block 3
 1ec:	f7 01       	movw	r30, r14
 1ee:	ee 0f       	add	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	ee 0f       	add	r30, r30
 1f4:	ff 1f       	adc	r31, r31
 1f6:	ee 58       	subi	r30, 0x8E	; 142
 1f8:	ff 4f       	sbci	r31, 0xFF	; 255
 1fa:	80 81       	ld	r24, Z
 1fc:	0e 94 7b 00 	call	0xf6	; 0xf6 <HC595_out>
	HC595_out(buffer[4 * row + 1]); //block 2
 200:	f8 01       	movw	r30, r16
 202:	81 81       	ldd	r24, Z+1	; 0x01
 204:	0e 94 7b 00 	call	0xf6	; 0xf6 <HC595_out>
	HC595_out(buffer[4 * row]); //block 1
 208:	f8 01       	movw	r30, r16
 20a:	80 81       	ld	r24, Z
 20c:	0e 94 7b 00 	call	0xf6	; 0xf6 <HC595_out>
	ST_CP_low();
 210:	d8 98       	cbi	0x1b, 0	; 27
	ST_CP_high();
 212:	d8 9a       	sbi	0x1b, 0	; 27

	PORTC = ~(1 << row);
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0d 2c       	mov	r0, r13
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__vector_8+0x8a>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	0a 94       	dec	r0
 222:	e2 f7       	brpl	.-8      	; 0x21c <__vector_8+0x86>
 224:	80 95       	com	r24
 226:	85 bb       	out	0x15, r24	; 21

	row++;
 228:	8d 2d       	mov	r24, r13
 22a:	8f 5f       	subi	r24, 0xFF	; 255
 22c:	80 93 90 00 	sts	0x0090, r24
	if(row == 8)
 230:	88 30       	cpi	r24, 0x08	; 8
 232:	11 f4       	brne	.+4      	; 0x238 <__vector_8+0xa2>
		row = 0;
 234:	10 92 90 00 	sts	0x0090, r1
}
 238:	ff 91       	pop	r31
 23a:	ef 91       	pop	r30
 23c:	bf 91       	pop	r27
 23e:	af 91       	pop	r26
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	7f 91       	pop	r23
 246:	6f 91       	pop	r22
 248:	5f 91       	pop	r21
 24a:	4f 91       	pop	r20
 24c:	3f 91       	pop	r19
 24e:	2f 91       	pop	r18
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	ff 90       	pop	r15
 256:	ef 90       	pop	r14
 258:	df 90       	pop	r13
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <_exit>:
 264:	f8 94       	cli

00000266 <__stop_program>:
 266:	ff cf       	rjmp	.-2      	; 0x266 <__stop_program>
